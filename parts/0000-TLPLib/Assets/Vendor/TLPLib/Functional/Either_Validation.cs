/* This code is autogenerated from tuples.cs */
using System;
using System.Collections.Immutable;

namespace com.tinylabproductions.TLPLib.Functional {

  public static class EitherValidationExts {


public static Either<ImmutableList<A>, B> validation<A, B>(
  this Either<A, B> e1
) { return e1.mapLeft(ImmutableList.Create); }


public static Either<ImmutableList<A>, Tpl<B, C>> validation<A, B, C>(
  this Either<A, B> e1, Either<A, C> e2
) {
  foreach (var b in e1.rightValue)
    foreach (var c in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<B, C>>.Right(F.t(b, c));
  var arr = ImmutableList<A>.Empty;
  foreach (var a in e1.leftValue) arr = arr.Add(a);
  foreach (var a in e2.leftValue) arr = arr.Add(a);
  return Either<ImmutableList<A>, Tpl<B, C>>.Left(arr);
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3>> validation<A, P1, P2, P3>(
  this Either<ImmutableList<A>, Tpl<P1, P2>> e1,
  Either<A, P3> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4>> validation<A, P1, P2, P3, P4>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3>> e1,
  Either<A, P4> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5>> validation<A, P1, P2, P3, P4, P5>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4>> e1,
  Either<A, P5> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6>> validation<A, P1, P2, P3, P4, P5, P6>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5>> e1,
  Either<A, P6> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7>> validation<A, P1, P2, P3, P4, P5, P6, P7>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6>> e1,
  Either<A, P7> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8>> validation<A, P1, P2, P3, P4, P5, P6, P7, P8>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7>> e1,
  Either<A, P8> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9>> validation<A, P1, P2, P3, P4, P5, P6, P7, P8, P9>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8>> e1,
  Either<A, P9> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10>> validation<A, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9>> e1,
  Either<A, P10> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11>> validation<A, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10>> e1,
  Either<A, P11> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12>> validation<A, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11>> e1,
  Either<A, P12> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13>> validation<A, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12>> e1,
  Either<A, P13> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14>> validation<A, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13>> e1,
  Either<A, P14> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15>> validation<A, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14>> e1,
  Either<A, P15> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16>> validation<A, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15>> e1,
  Either<A, P16> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17>> validation<A, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16>> e1,
  Either<A, P17> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18>> validation<A, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17>> e1,
  Either<A, P18> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19>> validation<A, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18>> e1,
  Either<A, P19> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20>> validation<A, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19>> e1,
  Either<A, P20> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21>> validation<A, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20>> e1,
  Either<A, P21> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21>>.Left(arr);
  }
  throw new IllegalStateException();
}


public static Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22>> validation<A, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22>(
  this Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21>> e1,
  Either<A, P22> e2
) {
  foreach (var tpl in e1.rightValue)
    foreach (var value in e2.rightValue)
      return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22>>.Right(tpl.add(value));
  foreach (var _arr in e1.leftValue) {
    var arr = _arr;
    foreach (var a in e2.leftValue) arr = arr.Add(a);
    return Either<ImmutableList<A>, Tpl<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21, P22>>.Left(arr);
  }
  throw new IllegalStateException();
}

  }
}

